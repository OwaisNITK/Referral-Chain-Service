buildscript {
    repositories {
       jcenter{ url artifactoryBaseUrl+'/vol-repo-gateway' } 
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
		classpath("com.netflix.nebula:gradle-ospackage-plugin:4.8.0")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "nebula.ospackage"

version = referralChainServiceVersion

bootJar { launchScript() }

	repositories { jcenter{ url 'http://172.16.29.191:8191/artifactory/vol-repo-gateway'
		} }

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    
    //testCompile('org.junit.jupiter:junit-jupiter-api:5.4.0')
    //testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.0')
    //testCompile("junit:junit")
    
    //spring boot test api
	testCompile('org.springframework.boot:spring-boot-starter-test')
	// JUnit Jupiter API and TestEngine implementation
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
  	testCompile 'org.junit.jupiter:junit-jupiter-params:5.3.1'
  	
  	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.23.4'
  	// Only needed to run tests in an (Eclipse) IDE(A)
	testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.3.2'
	testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.3.2'
     
	compile('org.apache.httpcomponents:httpclient:4.5.6')
	runtimeOnly('mysql:mysql-connector-java')
   
    compile('org.springframework.boot:spring-boot-starter-log4j2')
	compile('com.lmax:disruptor:3.3.7')
}

configurations.all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

buildRpm {
	user "tomcat"
	permissionGroup "nobody"

	// Creates an empty log directory
	directory("/var/log/referral-chain-service", 0755)

	link("/opt/referral-chain-service/logs", "/var/log/referral-chain-service/")
}

test {

    useJUnitPlatform {
        excludeTags 'unqualify'
    }
    
    afterTest { desc, result -> 
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
    
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = false
        exceptionFormat "full"
    }

    //useJUnitPlatform()
}

build.dependsOn buildRpm





ospackage {
	packageName = "referral-chain-service"
	version = "${referralChainServiceVersion}"

	os = LINUX
	type = BINARY
	arch = NOARCH

	into '/opt/referral-chain-service'
	user "tomcat"
	permissionGroup "nobody"

	// Copy the actual .jar file
	from(jar.outputs.files) {
		// Strip the version from the jar filename
		rename { String fileName ->
			fileName.replace("referral-chain-service-${project.version}", "referral-chain-service")
		}
		fileMode 0500
		into ""
	}

	from("src/main/resources") {
		fileType CONFIG | NOREPLACE
		fileMode 0754
		into "config"
	}
	
	from("src/external-resources/referral-chain-service.conf") {
		fileType CONFIG | NOREPLACE
		fileMode 0754
		into ""
	}

}